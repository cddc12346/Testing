// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module on_device_translation.mojom;

import "components/services/on_device_translation/public/mojom/translator.mojom";
import "mojo/public/mojom/base/file_path.mojom";
import "mojo/public/mojom/base/read_only_file.mojom";
import "sandbox/policy/mojom/context.mojom";
import "sandbox/policy/mojom/sandbox.mojom";


// The file that is part of the language package.
struct OnDeviceTranslationLanguagePackageFile {
  // The relative path of the file within the language package.
  mojo_base.mojom.FilePath relative_path;
  // The read only file handle of the file.
  mojo_base.mojom.ReadOnlyFile file;
};

// The language package information of the TranslateKit library.
// Normally, `language1` and `language2` are input from hard-coded dictionary
// information within Chromium, but they can also be specified from the command
// line for testing purposes.
struct OnDeviceTranslationLanguagePackage {
  // The first ISO 639 language code of the language pair (eg:"en"). This can
  // either be both source or target language.
  string language1;
  // The second ISO 639 language code of the language pair (eg:"en"). This can
  // either be both source or target language.
  string language2;
  // The list of files that are part of the language package.
  array<OnDeviceTranslationLanguagePackageFile> files;
};

// The list of language package information.
struct OnDeviceTranslationServiceConfig {
  // The list of language packages.
  array<OnDeviceTranslationLanguagePackage> packages;
};


// Currently the sandboxing of the On Device Translation service is supported
// only on macOS.
// TODO(crbug.com/340778819): Implement sandboxing on other platforms.
[EnableIf=is_mac]
const sandbox.mojom.Sandbox kOnDeviceTranslationSandbox
    = sandbox.mojom.Sandbox.kOnDeviceTranslation;
[EnableIfNot=is_mac]
const sandbox.mojom.Sandbox kOnDeviceTranslationSandbox
    = sandbox.mojom.Sandbox.kNoSandbox;

// The service that provides translation capabilities through
// various implementation.
[ServiceSandbox=kOnDeviceTranslationSandbox,
 RequireContext=sandbox.mojom.Context.kBrowser]
interface OnDeviceTranslationService {
  // This must be called soon after creating the service. Also this can be used
  // when the binary or the language packages are updated (or uninstalled).
  SetServiceConfig(OnDeviceTranslationServiceConfig config);

  // Binds the receiver to a `Translator` implementation that could
  // do translation from `source_lang` to `target_lang`.
  CreateTranslator(
    string source_lang, string target_lang,
    pending_receiver<Translator> receiver
  ) => (bool is_sucessful);

  // Returns if the service could translate text from `source_lang` to
  // `target_lang`.
  CanTranslate(string source_lang, string target_lang) => (bool can_stranslate);
};
